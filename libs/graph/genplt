#!/bin/python3
from enum import IntEnum
import matplotlib.pyplot as plt
import networkx as nx
import random
import os
import sys
import argparse

def colors(name):
  if name == "BLUE":
    return "#b0e0e6"
  elif name == "GREEN":
    return "#98fb98"
  elif name == "RED":
    return "#f08080"
  elif name == "GRAY":
    return "#CCCCCC"
  elif name == "BLACK":
    return "#000000"
  elif name == "RAND":
    return rand_col()
  elif str.isdigit(name):
    return rand_col(int(name))
  elif name == "-1":
    return rand_col(-1)

def rand_col(seed=random.randint(1, 50)):
  return '#{:02x}{:02x}{:02x}'.format(seed%6*40, seed%10*20, seed%4*60)


######
# main

INFO = False
CWD=os.getcwd()
PR=os.path.basename(CWD)

inpath = "input.txt"
pltpath = "plt"

# Create the parser object
parser = argparse.ArgumentParser()

# Define the command-line arguments
parser.add_argument("-d", help="-d <number>")
parser.add_argument("-r", help="-r <number>")
parser.add_argument("-I", "--INFO", help="use info.txt")

# Parse the command-line arguments
args = parser.parse_args()

# Cycle through the flags
for arg in vars(args):
  value = getattr(args, arg)
  if arg == "d" and value is not None:
    inpath = f"{CWD}/dataset_{PR}/input/input{value}.txt"
    pltpath = f"{CWD}/dataset_{PR}/plt/plt{value}"
  if arg == "r" and value is not None:
    inpath = f"{CWD}/randset_{PR}/input/rinput{value}.txt"
    pltpath = f"{CWD}/randset_{PR}/plt/rplt{value}"
  if arg == "INFO" and value is not None:
    INFO = True

input_file = open(inpath)
info_file = open(f"{CWD}/info.txt", "a+")

class Size(IntEnum):
  SMALL = 0,
  BIG = 1

SIZE = Size.BIG.value

node_labels = {}
edge_labels = {}

G = nx.Graph()

props = {
  "arrowsize":[1, 5],
  "font_size":[1, 10],
  "node_size":[20, 200]
}


## get size
[n] = [int(x) for x in input_file.readline().split()]
m = n-1

if n > 40:
  SIZE = Size.SMALL.value

## add nodes
G.add_nodes_from(range(0, n))
node_color_name = ["BLUE" for _ in G.nodes()]
if INFO:
  for u in range(n):
    [type, i, _] = [str(x) for x in info_file.readline().split()]
    node_labels[u] = f"{u}({i}Â°)"
    node_color_name[u] = "BLUE" if type=="t1" else ("GREEN" if type=="t2" else "RED")

## add edges
edge_color_name = {}
for _ in range(0, m):
  u, v, w = [int(x) for x in input_file.readline().split()]
  G.add_edge(u, v)
  edge_labels[u, v] = str(w)
  edge_color_name[u, v] = "GRAY"
edge_color_name = [edge_color_name[u, v] for u, v in G.edges()]


## plotting

plt.figure(figsize=(10, 4), dpi=700)

a_pos = nx.kamada_kawai_layout(G)

nx.draw(G, pos=a_pos, with_labels=True,
  node_color=[colors(x) for x in node_color_name],
  edge_color=[colors(x) for x in edge_color_name],
  arrows=True,
  width=0.5,
  arrowsize=props["arrowsize"][SIZE],
  font_size=props["font_size"][SIZE],
  node_size=props["node_size"][SIZE])

nx.draw_networkx_labels(G, pos=a_pos,
  labels=node_labels,
  font_size=props["font_size"][SIZE])

nx.draw_networkx_edge_labels(G, pos=a_pos, 
  edge_labels=edge_labels,
  font_size=props["font_size"][SIZE])

### saving

plt.savefig(pltpath)
os.system(f"cp {pltpath}.png plt.png")
os.system(f"code {pltpath}.png")
plt.close()

### other utility functions

#nx.strongly_connected_components(G)
#nx.all_topological_sorts(G)

input_file.close()
info_file.close()